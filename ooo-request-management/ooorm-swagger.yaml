swagger: "2.0"

################################################################################
#                              API Information                                 #
################################################################################
info:

  version: "1.0.2"

  title: Out of Office Request Management REST API

  description: |
    This is the REST API to manage Out Of Office requests, such as requests for vacations by employees, requests validations by managers...
    The backend of the API is currently Gershwin, but the API is designed to be agnostic of Gershwin
    (because on some international locations, the backend may differ and it is required that the mobile application
    must not be impacted by the actual implementation of the backend; the API must hide the actual implementation).

    You can view the content of this YAML file in the [Swagger editor](http://editor.swagger.io/).
    Just copy/paste the content of this YAML in the left pane of the Swagger editor.
    The right pane will show you the well formatted documentation.
    
    The design of the API is based on the [Google JSON style guide](https://google.github.io/styleguide/jsoncstyleguide.xml).
    For example, **each response contains either a data or an error as the top level object**. The **meta attribute provided
    in each response is optional** and is reserved for future use to ease the parsing of response data.

    ### Security
    This API is secure using OAuth2 solution.
    For each call to the API you must provide:
    * In the HTTP headers the OAuth2 domain token :
    ```
    Authorization: Bearer <domain-token-value>
    ```

    ### Changelog
    * v1.0.0: initial proposal
    * v1.0.1: proposal 1 by Fabrice
    * v1.0.2: proposal 2 by Fabrice (with dedicated RequestForXXX defintions and a dedicated URL for the update of the status)


host: to.be.defined

basePath: /ooorm/api/v1

tags:
  - name: Request
  - name: User
  - name: Approver
  - name: Balance
  - name: Status

schemes:
  - https

consumes:
  - application/json
produces:
  - application/json


################################################################################
#                                           Parameters                         #
################################################################################
parameters:

  userId:
    name: userId
    in: path
    description: Technical identifier of the user
    type: string
    required: true

  requestId:
    name: requestId
    in: path
    description: Technical identifier of the request
    type: string
    required: true


################################################################################
#                                           Paths                              #
################################################################################
paths:

  /users/{userId}:
    parameters:
      - $ref: '#/parameters/userId'
    get:
      tags:
        - User
      description: Returns a user.
      responses:
        "200":
          description: Success. Returns the user.
          schema:
            type: object
            properties:
              meta:
                $ref: '#/definitions/Meta'
              data:
                $ref: '#/definitions/User'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'


  /approvers:
    parameters:
      - name: userId
        in: query
        description: User's id for whom the approvers are searched
        required: true
        type: string
    get:
      tags:
        - Approver
      description: Returns the list of approvers for a user.
      responses:
        "200":
          description: Success. Returns the list of approvers for the user.
          schema:
            type: object
            properties:
              meta:
                $ref: '#/definitions/Meta'
              data:
                type: array
                items:
                  $ref: '#/definitions/Approver'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'


  /balance:
    parameters:
      - name: userId
        in: query
        description: User's id for whom the balance is searched
        required: true
        type: string
    get:
      tags:
        - Balance
      description: Returns the balance of a user.
      responses:
        "200":
          description: Success. Returns the balance of the user.
          schema:
            type: object
            properties:
              meta:
                $ref: '#/definitions/Meta'
              data:
                $ref: '#/definitions/Balance'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'


  /requests:
    get:
      parameters:
        - name: ownerId
          in: query
          description: User's id of the owner of the requests (the requestor)
          required: false
          type: string
        - name: approverId
          in: query
          description: User's id of the approver of the requests. Mandatory to search requests to be validated by an approver. 
          required: false
          type: string
        - name: status
          in: query
          required: false
          type: string
          description: Status of the requests. Mandatory to search requests with a given status (for example those with pending validation).
          enum:
            - Created
            - ValidationPending
            - Validated
            - Refused
            - DeletionPending
            - DeletionValidated
            - DeletionRefused
        - name: startDate
          in: query
          description: "Start date [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) to be used for the search."
          required: false
          type: string
          format: date
        - name: endDate
          in: query
          description: "End date [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) to be used for the search."
          required: false
          type: string
          format: date
      tags:
        - Request
      description: Returns a list of requests which match some params.
      responses:
        "200":
          description: Success. Returns the list of requests which match the provided params.
          schema:
            type: object
            properties:
              meta:
                $ref: '#/definitions/Meta'
              data:
                type: array
                items:
                  $ref: '#/definitions/RequestForGET'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'

    post:
      tags:
        - Request
      description: Creates a request
      parameters:
        - name: body
          in: body
          description: Request data
          required: true
          schema:
            $ref: '#/definitions/RequestForPOST'
      responses:
        "201":
          description: "Success. Returns the URL of the created request in the HTTP location header."
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'


  /requests/{requestId}:
    parameters:
      - $ref: '#/parameters/requestId'
    get:
      tags:
        - Request
      description: Returns a request
      responses:
        "200":
          description: Success. Returns the request.
          schema:
            type: object
            properties:
              meta:
                $ref: '#/definitions/Meta'
              data:
                $ref: '#/definitions/RequestForGET'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'

    put:
      tags:
        - Request
      description: "Updates a request. To specifically update the status of the request, use the request/{id}/status URL."
      parameters:
        - name: body
          in: body
          description: Request data
          required: true
          schema:
            $ref: '#/definitions/RequestForPUT'
      responses:
        "200":
          description: Success
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'

    delete:
      tags:
        - Request
      description: Deletes a request
      responses:
        "204":
          description: Success (204=No Content)
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'


  /requests/{requestId}/status:
    parameters:
      - $ref: '#/parameters/requestId'
    put:
      tags:
        - Status
      description: Updates the status of a request (to validate or refuse a request for example)
      parameters:
        - name: body
          in: body
          description: Status data
          required: true
          schema:
            $ref: '#/definitions/RequestStatusForPUT'
      responses:
        "200":
          description: Success
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'



################################################################################
#                                 Definitions                                  #
################################################################################
definitions:

  User:
    description: User data.
    type: object
    required:
      - id
      - firstName
      - lastName
    properties:
      id:
        type: string
        description: Id of the user
      firstName:
        type: string
        description: First name of the user
      lastName:
        type: string
        description: Last name of the user
      roles:
        type: object
        description: Roles of the user
        properties:
          manager:
            type: boolean

  Approver:
    description: Approver data.
    type: object
    required:
      - id
      - firstName
      - lastName
    properties:
      id:
        type: string
        description: Id of the approver
      firstName:
        type: string
        description: First name of the approver
      lastName:
        type: string
        description: Last name of the approver

  Balance:
    description: Balance data.
    type: object
    required:
      - userId
      - comment
    properties:
      userId:
        type: string
        description: Id of the user
      comment:
        type: string
        description: Balance comment
      vacations:
        type: number
        description: Balance for vacations
      RTT:
        type: number
        description: Balance for RTT

  RequestForGET:
    description: Request data as result of the GET operation (GET=search).
    type: object
    properties:
      id:      
        type: string
        description: Id of the request. 
      ownerId:
        type: string
        description: Id of the owner of the request
      ownerDisplayName:
        type: string
        description: Display name of the owner of the request.
      approverId:
        type: string
        description: Id of the approver of the request
      approverDisplayName:
        type: string
        description: Display name of the approver of the request.
      fromDate:
        type: string
        format: date
        description: "Start date [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) of the request"
      fromAfternoon:
        type: boolean
        description: "Does the request begin the aftenoon only ?"
      toDate:
        type: string
        format: date
        description: "End date [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) of the request"
      toMorning:
        type: boolean
        description: "Does the request end the morning only ?"
      status:
        $ref: '#/definitions/RequestStatus'
      reason:
        type: string
        description: "Reason (=type) of the request (vacations, RTT...)"
      createdAt:
        type: string
        format: date
        description: "Date [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) of the creation of the request by the owner. Filled during GET result. Never used as input parameter."
      updatedAt:
        type: string
        format: date
        description: "Date [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) of the last update of the request either, by the owner or the approver. Filled during GET result. Never used as input parameter."
      validatedORefusedAt:
        type: string
        format: date
        description: "Date [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) of the validation or the refusal of the request by the approver. Filled during GET result. Never used as input parameter."

  RequestForPOST:
    description: Request data as input for the POST operation (POST=create).
    type: object
    required:
      - ownerId
      - approverId
      - fromDate
      - toDate
      - status
      - reason
    properties:
      ownerId:
        type: string
        description: Id of the owner of the request
      approverId:
        type: string
        description: Id of the approver of the request
      fromDate:
        type: string
        format: date
        description: "Start date [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) of the request"
      fromAfternoon:
        type: boolean
        description: "Does the request begin the aftenoon only ?"
      toDate:
        type: string
        format: date
        description: "End date [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) of the request"
      toMorning:
        type: boolean
        description: "Does the request end the morning only ?"
      status:
        $ref: '#/definitions/RequestStatus'
      reason:
        type: string
        description: "Reason (=type) of the request (vacations, RTT...)"

  RequestForPUT:
    description: Request data as input for the PUT operation (PUT=update).
    type: object
    required:
      - id
      - ownerId
      - approverId
      - fromDate
      - toDate
      - status
      - reason
    properties:
      id:      
        type: string
        description: Id of the request. 
      ownerId:
        type: string
        description: Id of the owner of the request
      approverId:
        type: string
        description: Id of the approver of the request
      fromDate:
        type: string
        format: date
        description: "Start date [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) of the request"
      fromAfternoon:
        type: boolean
        description: "Does the request begin the aftenoon only ?"
      toDate:
        type: string
        format: date
        description: "End date [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) of the request"
      toMorning:
        type: boolean
        description: "Does the request end the morning only ?"
      status:
        $ref: '#/definitions/RequestStatus'
      reason:
        type: string
        description: "Reason (=type) of the request (vacations, RTT...)"


  RequestStatus:
    type: string
    description: Status of the request
    enum:
      - Created
      - ValidationPending
      - Validated
      - Refused
      - DeletionPending
      - DeletionValidated
      - DeletionRefused


  RequestStatusForPUT:
    description: Status data as input for the PUT operation (PUT=update).
    type: object
    required:
      - id
      - status
      - userId
    properties:
      id:
        type: string
        description: Id of the request
      status:
        $ref: '#/definitions/RequestStatus'
      userId:
        type: string
        description: Id of the user who updates the status (can be the owner or the approver)
      comment:
        type: string
        description: Comment for the update of the status (specially useful when a request is refused)


  Meta:
    description: Code and list of messages in metadata
    type: object
    properties:
      code:
        type: string
      messages:
        type: array
        items:
          type: string


  Error:
    description: Error object with a code and a message
    type: object
    properties:
      code:
        type: string
      message:
        type: string
